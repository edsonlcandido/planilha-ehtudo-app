name: Advanced APK Build and Deploy

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release
      create_release:
        description: 'Create GitHub release'
        required: false
        default: false
        type: boolean

env:
  FLUTTER_VERSION: '3.24.5'

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    name: Lint and Test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed .
        
      - name: Analyze project source
        run: flutter analyze --fatal-infos
        
      - name: Run tests
        run: flutter test --coverage
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info
          fail_ci_if_error: false

  build-apk:
    runs-on: ubuntu-latest
    needs: lint-and-test
    name: Build APK
    
    strategy:
      matrix:
        build_type: [debug, release]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'
          
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Configure Gradle
        run: |
          mkdir -p ~/.gradle
          echo "org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8" >> ~/.gradle/gradle.properties
          echo "org.gradle.parallel=true" >> ~/.gradle/gradle.properties
          echo "org.gradle.configureondemand=true" >> ~/.gradle/gradle.properties
          echo "org.gradle.daemon=false" >> ~/.gradle/gradle.properties
          
      - name: Setup Android signing (Release only)
        if: matrix.build_type == 'release' && github.event_name != 'pull_request'
        run: |
          # Create keystore directory
          mkdir -p android/app/keystore
          
          # If signing keys are available as secrets, create keystore
          if [ "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" != "" ]; then
            echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore/release.keystore
            
            # Create key.properties file
            cat > android/key.properties << EOF
          storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
          keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
          storeFile=keystore/release.keystore
          EOF
          else
            echo "No signing keys configured, using debug signing"
          fi
          
      - name: Build APK (${{ matrix.build_type }})
        run: |
          if [ "${{ matrix.build_type }}" == "release" ]; then
            flutter build apk --release --split-per-abi
          else
            flutter build apk --debug
          fi
          
      - name: Rename APK files
        run: |
          cd build/app/outputs/flutter-apk/
          if [ "${{ matrix.build_type }}" == "release" ]; then
            # For release builds with split ABIs
            if [ -f "app-arm64-v8a-release.apk" ]; then
              mv app-arm64-v8a-release.apk planilha-ehtudo-arm64-v8a-release.apk
            fi
            if [ -f "app-armeabi-v7a-release.apk" ]; then
              mv app-armeabi-v7a-release.apk planilha-ehtudo-armeabi-v7a-release.apk
            fi
            if [ -f "app-x86_64-release.apk" ]; then
              mv app-x86_64-release.apk planilha-ehtudo-x86_64-release.apk
            fi
            if [ -f "app-release.apk" ]; then
              mv app-release.apk planilha-ehtudo-universal-release.apk
            fi
          else
            mv app-debug.apk planilha-ehtudo-debug.apk
          fi
          ls -la
          
      - name: Upload APK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: planilha-ehtudo-${{ matrix.build_type }}-apk
          path: build/app/outputs/flutter-apk/*.apk
          retention-days: ${{ matrix.build_type == 'release' && 90 || 30 }}
          compression-level: 6

  create-release:
    runs-on: ubuntu-latest
    needs: build-apk
    name: Create Release
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v') || inputs.create_release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      - name: Display artifact structure
        run: find ./artifacts -type f -name "*.apk" | sort
        
      - name: Get version from pubspec.yaml
        id: version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //' | sed 's/+.*//')
          BUILD_NUMBER=$(grep '^version:' pubspec.yaml | sed 's/.*+//')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "full_version=$VERSION+$BUILD_NUMBER" >> $GITHUB_OUTPUT
          
      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << EOF
          # Planilha É Htudo App - Release ${{ steps.version.outputs.full_version }}
          
          Versão ${{ steps.version.outputs.version }} (Build ${{ steps.version.outputs.build_number }})
          
          ## 📱 Sobre o App
          Este aplicativo Flutter monitora notificações de aplicativos selecionados, armazena as transações localmente e sincroniza com um webhook configurado.
          
          ## 📦 Downloads Disponíveis
          - **Release APKs**: Versões otimizadas para produção
            - ARM64 (recomendado para dispositivos modernos)
            - ARMv7 (compatibilidade com dispositivos mais antigos)
            - x86_64 (emuladores e dispositivos Intel)
            - Universal (todos os tipos de CPU, arquivo maior)
          - **Debug APK**: Versão de desenvolvimento para testes
          
          ## 🔄 Mudanças
          - Construído a partir do commit: \`${{ github.sha }}\`
          - Branch: \`${{ github.ref_name }}\`
          - Workflow executado em: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ## 🚀 Instalação
          1. Baixe o APK apropriado para seu dispositivo
          2. Habilite "Fontes desconhecidas" nas configurações do Android
          3. Instale o APK
          4. Conceda as permissões necessárias quando solicitado
          
          ## ⚙️ Configuração
          1. Abra o app e conceda permissão de acesso às notificações
          2. Vá para Configurações e selecione os apps que deseja monitorar
          3. Configure o webhook na tela de configurações (se necessário)
          EOF
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('v{0}', steps.version.outputs.full_version) }}
          name: Planilha É Htudo v${{ steps.version.outputs.full_version }}
          body_path: release_notes.md
          files: |
            artifacts/planilha-ehtudo-release-apk/*.apk
            artifacts/planilha-ehtudo-debug-apk/*.apk
          draft: false
          prerelease: ${{ contains(github.ref, 'develop') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'alpha') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}